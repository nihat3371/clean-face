Code Style and Structure

    Write concise, technical code.

    Use functional and declarative programming patterns; avoid classes.

    Prefer iteration and modularization over code duplication.

    Use descriptive variable names with auxiliary verbs (e.g., isLoaded, hasError).

    Structure files as: exported page/component → GraphQL queries → helpers → static content → types.

Naming Conventions

    Favor named exports for components and utilities.

    Prefix GraphQL query files with use (e.g., useSiteMetadata.ts).

Syntax and Formatting

    Use the function keyword for pure functions.

    Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.

    Use declarative JSX, keeping JSX minimal and readable.

UI and Styling

    Use Tailwind for utility-based styling.

    Follow a mobile-first design approach.

Gatsby Best Practices

    Use Gatsby's useStaticQuery for querying GraphQL data at build time.

    Use gatsby-node.js for programmatically creating pages based on static data.

    Use Gatsby’s <Link> component for internal navigation (for preloading).

    For static pages, place them in src/pages/.

    Optimize images using Gatsby plugins: gatsby-plugin-image, gatsby-transformer-sharp.

    Use environment variables via gatsby-config.js.

    Leverage gatsby-browser.js and gatsby-ssr.js for client/SSR APIs.

    Use caching plugins like gatsby-plugin-offline, gatsby-plugin-cache.

    Refer to official Gatsby docs for best practices on GraphQL, data fetching, and build optimization.